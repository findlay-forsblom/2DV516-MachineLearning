import numpy as npclass KNeighborsClassifier:  def __init__(self, n_neighbors):    self.n_neighbors = n_neighbors  def fit(self, X, y):    self.X = X    self.y = y  def predict(self, Xtest):    ypred = np.apply_along_axis(self._euc_distance, 1, Xtest)    return np.array(ypred)   def _euc_distance(self, point):    dist = (point - self.X)**2    dist = np.sum(dist, axis=1)    euclidDist = np.sqrt(dist)    arg = np.argsort(euclidDist)[:self.n_neighbors]    closestNeigbors = self.y[arg]        # takes the most frequent number from the array    (values,counts) = np.unique(closestNeigbors,return_counts=True)    ind=np.argmax(counts)    return values[ind]  def getTraningerrors(self):    X = np.copy(self.X)    y = self.y    ypred = self.predict(X)    errors = 0        errors = y[ypred != y]    return len(errors)    